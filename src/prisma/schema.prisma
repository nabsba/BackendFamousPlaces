datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DEV")
//  url      = env("PROD_GENERAL")
}
generator client {
  provider      = "prisma-client-js"
  output        = "./generated"
  binaryTargets = ["rhel-openssl-1.0.x", "darwin-arm64"]
}
model User {
  id                       String                 @id @default(cuid())
  name                     String?
  email                    String                 @unique
  image                    String?
  roleId                   String                 
  language                 String?
  createdAt                DateTime               @default(now())
  userAuthentificationId   String
  updatedAt DateTime @updatedAt
  accounts                 Account[]
  sessions                 Session[]
  role                     Role      @relation(fields: [roleId], references: [id])
  UserAuthentification     UserAuthentification      @relation(fields: [userAuthentificationId], references: [id])
}
model UserAuthentification {
  id                       String                 @id @default(cuid())
  userName                 String
  password                 String
  attemptAuthentification  Int                    @default(3)
  dateLastAttempt          DateTime?
  isRedefinePassword       String?                @unique
 	isUserBlocked            Boolean?
  User User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId], name: "provider_providerAccountId")

}
model Role {
  id          String  @id @default(cuid())
  roleName    String   @unique @default("guest")
  users       User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Country {
 id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  cities    City[]
}

model Address {
  id        String   @id @default(cuid())
  number    Int
  street    String
  postcode  String
  cityId      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  places    Place[]
  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  countryId Int
  country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  address Address[]
}
model Place {
  id          String       @id @default(cuid())
  popularity  Int          @default(0)
  createdAt   DateTime     @default(now())
  addressId   String
  address     Address      @relation(fields: [addressId], references: [id])
  placeDetail PlaceDetail[] // One-to-many relation to PlaceDetail
  bookings    Booking[]
}

model PlaceDetail {
  id          String   @id @default(cuid())
  name        String
  description  String   @unique
  createdAt    DateTime @default(now())
  placeId      String   // Remove @unique to allow multiple PlaceDetails for one Place
  languageId   Int      // Keeps the unique constraint if you need unique PlaceDetail per language
  place        Place    @relation(fields: [placeId], references: [id]) // Many PlaceDetails can belong to one Place
}
model Language {
  id        Int      @id @default(autoincrement())
  type      String   @unique
  createdAt DateTime @default(now())
  // No back-reference to PlaceDetail
}
model Booking {
  id             String   @id @default(cuid())
  dateStart      DateTime
  dateEnd        DateTime
  createdAt      DateTime @default(now())
  availableFrom  DateTime
  notAvailableEnd DateTime
  placeId         String   // Foreign key to Place
  place           Place    @relation(fields: [placeId], references: [id]) // Many-to-one relationship with Place
}